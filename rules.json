{
  "rules": {
    "communities": {
      ".indexOn": ["id", "slug"],
      ".read": true,
      "$id": {
        "createdAt": {
          ".validate": "newData.val() <= now",
          // Only let authenticated users write to this, and only once at creation
          ".write": "!data.exists()"
        },
        // Make sure the createdBy field contains a valid user ID
        "createdBy": {
          ".validate": "root.child('users').hasChild(newData.val()) && newData.val() === auth.uid",
          // Only set once at creation
          ".write": "!data.exists()"
        },
        "id": {
          ".validate": "newData.val() === $id",
          ".write": "!data.exists()"
        },
        "name": {
          ".validate": "newData.isString() && newData.val() !== 'everything' && newData.val() !== 'notifications' && newData.val() !== 'undefined' && newData.val() !== 'null'",
          // Only owners can change the name
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "slug": {
          ".validate": "newData.isString() && newData.val() !== 'everything' && newData.val() !== 'notifications' && newData.val() !== 'login'&& newData.val() !== 'logout' && newData.val() !== 'discover' && newData.val() !== 'admin' && newData.val() !== 'dashboard' && newData.val() !== 'pro' && newData.val() !== 'share' && newData.val() !== 'undefined' && newData.val() !== 'null' && newData.val() !== 'legal' && newData.val() !== 'terms' && newData.val() !== 'privacy' && newData.val() !== 'cookies' && newData.val() !== 'team' && newData.val() !== 'about' && newData.val() !== 'contact' && newData.val() !== 'help' && newData.val() !== 'jobs' && newData.val() !== 'upgrade' && newData.val() !== 'pricing' && newData.val() !== 'business' && newData.val() !== 'blog' && newData.val() !== 'apps' && newData.val() !== 'developers' && newData.val() !== 'status' && newData.val() !== 'copyright' && newData.val() !== 'downgrade' && newData.val() !== 'faq' && newData.val() !== 'help' && newData.val() !== 'security' && newData.val() !== 'api' && newData.val() !== 'shop'",
          // A slug can be set if the frequency is new, or can be changed by the owner when it is being deleted
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "users": {
          "$userId": {
            // Make sure a valid user is being added to the users
            ".validate": "root.child('users').hasChild($userId)",
            // Only let a user themselves or an owner edit this
            ".write": "$userId === auth.uid || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'",
            "id": {
              ".validate": "newData.val() === $userId",
              ".write": "!data.exists()"
            },
            // Make sure the permissions being set is "member" except when it's done by an owner
            "permission": {
              ".validate": "newData.val() === 'member' || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner' && newData.val() === 'owner'"
            },
            "joined": {
              ".validate": "newData.val() <= now"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "frequencies": {
          // Only let owners add new frequencies
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'",
          "$frequencyId": {
            ".validate": "root.child('frequencies').hasChild($frequencyId)",
            "id": {
              ".validate": "$frequencyId === newData.val()"
            },
            "default": {
              ".validate": "newData.isBoolean()"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        // Make sure not more fields than the ones specified above are added
        "$other": {
          ".validate": false
        }
      }
    },
    "frequencies": {
      ".indexOn": ["id", "slug"],
      ".read": true,
      "$id": {
        // Make sure all the necessary fields exist
        // ".validate": "newData.hasChildren(['createdAt', 'createdBy', 'id', 'name', 'slug'])",
        // Make sure createdAt is a date which was before right now (not in the future)
        "createdAt": {
          ".validate": "newData.val() <= now",
          // Only let authenticated users write to this, and only once at creation
          ".write": "!data.exists() && data.parent().child('users').hasChild(auth.uid)"
        },
        // Make sure the createdBy field contains a valid user ID
        "createdBy": {
          ".validate": "root.child('users').hasChild(newData.val())",
          // Only set once at creation
          ".write": "!data.exists()"
        },
        // Make sure the id is the same as the path
        "id": {
          ".validate": "newData.val() === $id",
          ".write": "!data.exists()"
        },
        "name": {
          ".validate": "newData.isString() && newData.val() !== 'everything' && newData.val() !== 'undefined' && newData.val() !== 'null'",
          // Only owners can change the name
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "settings": {
          ".validate": "newData.exists()",
          // Only owners can change the settings
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "slug": {
          ".validate": "newData.isString() && newData.val() !== 'everything' && newData.val() !== 'undefined' && newData.val() !== 'null'",
          // A slug can be set if the frequency is new, or can be changed by the owner when it is being deleted
          ".write": "!data.exists() || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "description": {
          ".validate": "newData.isString() && newData.val() !== 'undefined' && newData.val() !== 'null' && newData.val().length <= 140",
          ".write": "!data.exists() || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "community": {
          ".validate": "newData.isString() && root.child('communities').hasChild(newData.val())",
          ".write": "!data.parent().exists() || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'"
        },
        "users": {
          "$userId": {
            // Make sure a valid user is being added to the users
            ".validate": "root.child('users').hasChild($userId)",
            // Only let a user themselves or an owner edit this
            ".write": "$userId === auth.uid || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'",
            // Make sure the permissions being set is "subscriber" except when it's done by an owner
            "permission": {
              ".validate": "newData.val() === 'subscriber' || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner' && newData.exists()"
            },
            "joined": {
              ".validate": "newData.val() <= now"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "stories": {
          // Only let subscribers or owners post new stories
          ".write": "data.parent().child('users/' + auth.uid + '/permission').val() === 'subscriber' || data.parent().child('users/' + auth.uid + '/permission').val() === 'owner'",
          "$storyId": {
            ".validate": "root.child('stories/' + $storyId).exists()",
            "id": {
              ".validate": "$storyId === newData.val()"
            },
            "deleted": {
              ".validate": "newData.isBoolean()"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        // Make sure not more fields than the ones specified above are added
        "$other": {
          ".validate": false
        }
      }
    },
    "messages": {
      ".indexOn": ["storyId"],
      "$messageId": {
        // Only let users read the messages if there are no frequencies, if the frequency is public or the user is a member of the frequency
        ".read": "root.child('/frequencies/' + data.child('frequencyId').val() + '/settings/private').val() === false || root.child('/frequencies/' + data.child('frequencyId').val() + '/users').hasChild(auth.uid)",
        // Only let members of the frequency write messages
        ".write": "root.child('/frequencies/' + newData.child('frequencyId').val() + '/users').hasChild(auth.uid)",
        // Make sure all the necessary fields exists
        ".validate": "newData.hasChildren(['id', 'storyId', 'frequencyId', 'timestamp', 'userId', 'message'])",
        // Make sure the id field matches the path
        "id": {
          ".validate": "newData.val() === $messageId"
        },
        // Make sure the storyId field matches the path
        "storyId": {
          ".validate": "root.child('stories/' + newData.val()).exists()"
        },
        // Make sure frequencyId points to a valid frequency
        "frequencyId": {
          ".validate": "root.child('frequencies/' + newData.val()).exists()"
        },
        // Make sure the timestamp is any value before now
        "timestamp": {
          ".validate": "newData.val() <= now"
        },
        // Make sure this is a valid user, and the one of the logged-in user
        "userId": {
          ".validate": "auth.uid === newData.val() && root.child('users/' + newData.val()).exists()"
        },
        "message": {
          // Make sure both type and content exist
          ".validate": "newData.hasChildren(['type', 'content'])",
          // Make sure the type is text
          "type": {
            ".validate": "newData.val() === 'text' || newData.val() === 'media' || newData.val() === 'draft-js'"
          }
        }
      }
    },
    "stories": {
      ".indexOn": ["frequencyId"],
      "$story": {
        // Only let users read the stories if the frequency is public or the user is a member of the frequency
        ".read": "root.child('/frequencies/' + data.child('frequencyId').val() + '/settings/private').val() === false || root.child('/frequencies/' + data.child('frequencyId').val() + '/users').hasChild(auth.uid)",
        // Only let members of the frequency write stories and make sure a story is passed
        ".write": "(!data.exists() && root.child('/frequencies/' + newData.child('frequencyId').val() + '/users').hasChild(auth.uid)) || (data.exists() && (root.child('/frequencies/' + data.child('frequencyId').val() + '/users/' + auth.uid + '/permission').val() === 'owner' || data.child('creator/uid').val() === auth.uid) || (data.exists() && root.child('/frequencies/' + data.child('frequencyId').val() + '/users/' + auth.uid + '/permission').val() === 'subscriber'))",
        // Make sure content exists and the frequency is a real frequency
        ".validate": "root.child('frequencies/' + newData.child('frequencyId').val()).exists()",
        // Make sure the frequency field is the same as the top-level frequency path
        "frequencyId": {
          ".validate": "root.child('/frequencies/' + newData.val()).exists()"
        },
        // Make sure the ID is the same as the path
        "id": {
          ".validate": "newData.val() === $story"
        },
        // If this is a new story make sure the message_count is set to 0
        "messages": {
          "$messageId": {
            "id": {
              ".validate": "$messageId === newData.val()"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        // Make sure the timestamp is any value before now
        "timestamp": {
          ".validate": "newData.val() <= now"
        },
        "last_activity": {
          ".validate": "newData.val() <= now"
        },
        // Make sure published is a boolean
        "published": {
          ".validate": "newData.isBoolean()"
        },
        "content": {
          // Make sure title and either description or media exist
          ".validate": "newData.child('title').exists() && (newData.child('description').exists() || newData.child('media').exists())",
          "description": {
            ".validate": "newData.isString()"
          },
          "media": {
            ".validate": true
          },
          "title": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        },
        "coverPhoto": {
          ".validate": "newData.exists()"
        },
        "deleted": {
          ".validate": "newData.isBoolean()"
        },
        "creator": {
          ".validate": "newData.child('uid').exists() && newData.child('displayName').exists() && newData.child('photoURL').exists()",
          // Make sure this is a valid UID, and the one of the logged-in user
          "uid": {
            ".validate": "newData.isString() && auth.uid === newData.val() && root.child('users/' + newData.val()).exists()"
          },
          // Make sure this is the correct displayName for the passed UID
          "displayName": {
            ".validate": "newData.isString() && root.child('users/' + newData.parent().child('uid').val()).child('displayName').val() === newData.val()"
          },
          // Make sure this is the correct photoURL for the passed UID
          "photoURL": {
            ".validate": "newData.isString() && root.child('users/' + newData.parent().child('uid').val()).child('photoURL').val() === newData.val()"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "users_private": {
      "$user": {
        ".read": "auth.uid === $user",
        ".write": "auth.uid === $user",
        "subscriptions": {
          ".validate": "newData.exists()"
        },
        "customerId": {
          ".validate": "newData.isString()"
        },
        "email": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "users": {
      ".indexOn": ["uid", "username"],
      ".read": true,
      "$user": {
        ".validate": "data.exists() || newData.hasChildren(['displayName', 'created', 'photoURL', 'uid'])",
        "created": {
          ".write": "auth.uid === $user",
          ".validate": "newData.val() <= now"
        },
        "lastSeen": {
          ".write": "auth.uid === $user",
          ".validate": "newData.val() <= now"
        },
        "displayName": {
          ".write": "auth.uid === $user",
          ".validate": "newData.isString()"
        },
        "photoURL": {
          ".write": "auth.uid === $user",
          ".validate": "newData.isString()"
        },
        "username": {
          ".write": "auth.uid === $user",
          ".validate": "newData.isString()"
        },
        "uid": {
          ".write": "auth.uid === $user",
          ".validate": "newData.val() === $user"
        },
        "email": {
          ".write": "auth.uid === $user",
          ".validate": "newData.isBoolean()"
        },
        "subscriptions": {
          ".write": "auth.uid === $user",
          ".validate": "newData.exists()"
        },
        "communities": {
          "$communityId": {
            // Let the user themselves, and the owner of a frequency edit these settings
            ".write": "auth.uid === $user || root.child('communities/' + $communityId + '/users/' + auth.uid + '/permission').val() === 'owner'",
            ".validate": "newData.hasChildren(['id']) && root.child('communities').hasChild($communityId)",
            "id": {
              ".validate": "$communityId === newData.val()"
            },
            "permission": {
              ".validate": "newData.val() === root.child('communities/' + $communityId + '/users/' + auth.uid + '/permission').val()"
            }
          }
        },
        "frequencies": {
          "$frequencyId": {
            // Let the user themselves, and the owner of a frequency edit these settings
            ".write": "auth.uid === $user || root.child('frequencies/' + data.child('id').val() + '/users/' + auth.uid + '/permission').val() === 'owner'",
            ".validate": "data.hasChildren(['id']) || newData.hasChildren(['id'])",
            "id": {
              ".validate": "$frequencyId === newData.val()"
            },
            "permission": {
              ".validate": "newData.val() === 'owner' || newData.val() === 'subscriber'"
            }
          }
        }
      }
    },
    "notifications": {
      "$userId": {
        ".read": "auth.uid === $userId",
        "$notificationId": {
          ".write": "!data.exists() || auth.uid === $userId",
          ".validate": "newData.hasChildren(['activityType', 'id', 'ids', 'sender', 'timestamp', 'read']) || auth.uid === $userId",
          "activityType": {
            ".validate": "newData.isString()"
          },
          "id": {
            ".validate": "newData.val() === $notificationId"
          },
          "ids": {
            "$type": {
              ".validate": "newData.isString()"
            }
          },
          "content": {
            ".validate": "newData.isString() && newData.val().length <= 140"
          },
          "sender": {
            "uid": {
              ".validate": "newData.val() === auth.uid"
            },
            "displayName": {
              ".validate": "root.child('users/' + auth.uid + '/displayName').val() === newData.val()"
            },
            "photoURL": {
              ".validate": "root.child('users/' + auth.uid + '/photoURL').val() === newData.val()"
            }
          },
          "timestamp": {
            ".validate": "newData.val() <= now"
          },
          "read": {
            ".validate": "newData.isBoolean()"
          }
        }
      }
    }
  }
}
